# Deploy GitHub release when a SemVer tag is pushed
# ------------------------------------------------------------------------------
#
#             NOTICE: **This file is maintained with puppetsync**
#
# This file is updated automatically as part of a standardized asset baseline.
#
# The next baseline sync will overwrite any local changes to this file!
#
# ------------------------------------------------------------------------------
#
# NOTES:
#
# * The CHANGLOG text is altered to remove RPM-style date headers, which don't
#   render well as markdown on the GitHub release pages
#
---
name: 'Tag: Release to GitHub'

on:
  push:
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+'

jobs:
  create-github-release:
    name: Deploy GitHub Release
    if: github.repository_owner == 'simp'
    runs-on: ubuntu-latest
    outputs:
      prerelease: ${{ steps.tag-check.outputs.prerelease }}
      tag: ${{ steps.tag-check.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          clean: true
          fetch-depth: 0

      - name: Get tag & annotation info (${{github.ref}})
        id: tag-check
        run: |
          tag="${GITHUB_REF/refs\/tags\//}"
          annotation="$(git for-each-ref "$GITHUB_REF" --format='%(contents)' --count=1)"
          annotation_title="$(echo "$annotation" | head -1)"

          if [[ "$tag" =~ ^(simp-|v)?[0-9]+\.[0-9]+\.[0-9]+(-(rc|alpha|beta|pre|post)?([0-9]+)?)?$ ]]; then
            if [ -n "${BASH_REMATCH[2]}" ]; then
              prerelease=yes
              annotation_title="Pre-release of ${tag}"
            fi
          else
            printf '::error ::Release Tag format is not SemVer, X.Y.Z-R, X.Y.Z-<prerelease>: "%s"\n' "$RELEASE_TAG"
            exit 88
          fi

          echo "tag=$tag" | tee -a "$GITHUB_OUTPUT"
          echo "prerelease=$prerelease" | tee -a "$GITHUB_OUTPUT"
          echo "TARGET_TAG=$tag" | tee -a "$GITHUB_ENV"

          # Prepare annotation body as a file for the next step
          #
          # * The GitHub Release renders the text in this file as markdown
          # * The `perl -pe` removes RPM-style date headers from the CHANGELOG,
          #   because they don't render well as markdown on the Release page
          echo "RELEASE_MESSAGE<<EOF$$" >> "$GITHUB_ENV"
          printf '%s\n\n' "$annotation_title" >> "$GITHUB_ENV"
          echo "$annotation" |  tail -n +2 | \
            perl -pe 'BEGIN{undef $/;} s/\n\* (Mon|Tue|Wed|Thu|Fri|Sat|Sun) .*?\n//smg;' >> "$GITHUB_ENV"
          echo "EOF$$" >> "$GITHUB_ENV"

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${RELEASE_MESSAGE}" > /tmp/.commit-msg.txt
          args=(--file /tmp/.commit-msg.txt)
          [[ ${{ steps.tag-check.outputs.prerelease }} == yes ]] && args+=(--prerelease)

          hub release create ${args[@]} "$TARGET_TAG"
